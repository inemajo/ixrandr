#!/usr/bin/env python

from __future__ import print_function
from subprocess import check_output, Popen, PIPE
import sys
import os
import argparse

#
# Xrandr commands
def change_output_resolution(output, resolution):
    s = 'xrandr --output "{}" --mode {}'.format(output, resolution)
    print(s)
    os.system(s)

def output_off(output):
    s = 'xrandr --output "{}" --off'.format(output)
    print(s)
    os.system(s)

def enable_output(output):
    s = 'xrandr --output "{}" --auto'.format(output)
    print(s)
    os.system(s)

def set_output_relative_pos_to_output(output1, pos, output2):
    s = 'xrandr --output "{}" --{} "{}"'.format(output1, pos, output2)
    print(s)
    os.system(s)

def set_output_rotation(output, rotation):
    s = 'xrandr --output "{}" --rotate "{}"'.format(output1, rotation)
    print(s)
    os.system(s)

#
# parse xrandr output
def process_xrandr():
    result = []
    try:
        xrandr_output = check_output("xrandr")
        if type(xrandr_output) == bytes: # for python3 compatibility
            xrandr_output = xrandr_output.decode()
    except OSError:
        print("xrandr program not found")
        exit(1)
    screens = {}
    for line in xrandr_output.split('\n'):
        if not line:
            continue
        cols = [ t for t in line.strip().split(' ') if t ]
        # need to parse 'Screen 0: minimum 320 x 200, current ...'
        if cols[0] == 'Screen':
            cur_screen = int(cols[1][:-1])
            screens[cur_screen] = {}
            screens[cur_screen]['outputs'] = {}
            screens[cur_screen]['size'] = {}
            screens[cur_screen]['size']['minimum'] =  (
                int(cols[cols.index('minimum')+1]), 
                int(cols[cols.index('minimum')+3][:-1])
            )
            screens[cur_screen]['size']['current'] = (
                int(cols[cols.index('current')+1]),
                int(cols[cols.index('current')+3][:-1])
            )
            screens[cur_screen]['size']['maximum'] = (
                int(cols[cols.index('maximum')+1]),
                int(cols[cols.index('maximum')+3][:-1])
            )
        elif cols[1] in ['connected', 'disconnected']:
            output = {}
            output['name'] = cols[0]
            output["avaible_res"] = []
            screens[cur_screen]['outputs'][output['name']] = output
            if cols[1] == 'connected':
                output['connected'] = True
            else:
                output['connected'] = False
            if cols[2][0] != '(':
                output['enable'] = True
                output['cur_res'] = cols[2].split('+')[0].split('x')
                output["avaible_res"] = []
            else:
                output["enable"] = False
        else:
            tmp = cols[0].split('x')
            if len(tmp) != 2:
                continue
            w, h = tmp[0:2]
            if not w.isdigit() or not h.isdigit():
                continue
            output["avaible_res"].append(cols[0])
    return (screens)        


#
# complete menu
def complete(subject, possible):
    print(' '.join(possible))
    exit(0)

#
# readchar menu    
def readchar(subject, possible):
        import sys, tty, termios

        for i, opt in enumerate(possible):
            print('\033[31m{}\033[39m: {}'.format(i, opt))
        if sys.version_info.major == 2:
            sys.stdout.write(subject)
        else:
            print(subject,end="",flush=True)
        while 1:
            fd = sys.stdin.fileno()
            try:
                old_settings = termios.tcgetattr(fd)
            except termios.error:
                print('\n--rl option doesn\'t work in pipe')
                exit(1)
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(1)
            finally:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            if ch.isdigit() and int(ch) < len(possible):
                print(ch)
                return possible[int(ch)]
            elif ord(ch) == 3 or ord(ch) == 4 or ch == 'q': # ctrl+c/ctrl+d
                print("")
                exit(0)

##
## readline
def readline(subject, possible):
    class Completer:
        def __init__(self, words):
            self.words = words
            self.prefix = None
        def complete(self, prefix, index):
            if prefix != self.prefix:
                # we have a new prefix!
                # find all words that start with this prefix
                self.matching_words = [
                    w for w in self.words
                    if w.lower().startswith(prefix.lower())
                ]
                self.prefix = prefix
            try:
                return self.matching_words[index]
            except IndexError:
                return None
    import readline
    completer = Completer(possible)
    readline.parse_and_bind("tab: complete")
    readline.set_completer(completer.complete)

    for i, opt in enumerate(possible):
        print('\033[31m{}\033[39m: {}'.format(i, opt))
    while 1:
        try:
            if sys.version_info.major >= 3:
                choose = input(subject)
            else:
                choose = raw_input(subject)
        except KeyboardInterrupt:
            print("")
            exit(0)
        if choose.isdigit() and int(choose) < len(possible):
            return possible[int(choose)]
        elif choose in possible:
            return choose

#
# dialog menu
def dialog(subject, possible):
    try:
        from distutils.spawn import find_executable
    except ImportError:
        import os
        def find_executable(e):
            for p in os.getenv('PATH').split(os.path.pathsep):
                p=os.path.join(p,e)
                if os.path.exists(p) and os.access(p,os.X_OK):
                    return p
            return None
    dialog = find_executable('dialog')
    if dialog is None:
        print("You must install dialog program\napt-get install dialog\nyum install dialog\nwindows lolinstall dialog")
    
    args = [dialog, '--menu', subject, '20', '40', '22']
    for i, val in enumerate(possible):
        args += [str(i), str(val)]
    proc = Popen(args, stderr=PIPE)
    try:
        result = proc.communicate()[1]
        exit_val = proc.wait()
    except KeyboardInterrupt:
        proc.terminate()
        proc.wait()
        exit(0)
    if exit_val:
        print("Cancel")
    return possible[int(result)]


def select_screen(screens, screen1 = None):
    global quiet
    if screen1 is None:
        if len(screens) > 1:
            screen1 = menu("Select your screen:", list(screens.keys()))
        else: # screen allways assume
            screen1 = list(screens.keys())[0]
    if not quiet:
        print("Selected screen {}".format(screen1))
    return screen1

def select_output1(outputs, output1 = None):
        global quiet, assume
        if output1 is None:
                if len(outputs) > 1 or assume == False:
                    output1 = menu("Select your output: ", list(outputs.keys()))
                else:
                    output1 = list(outputs.keys())[0]
        if not quiet:
            print("Selected output {}".format(output1))

        outputs.pop(output1, None)
        output_actions = ["off", "resolution", "rotation"]
        if len(outputs) == 1:
            output_actions += ["left-of " + list(outputs.keys())[0],
                               "right-of " + list(outputs.keys())[0]]
        elif len(outputs) > 1:
            output_actions += ["left-of", "right-of"]
        return output1, output_actions

def select_action(output, output_actions, action = None):
    if action is None:
        action = menu("What action for {}: ".format(output), output_actions)

    if action.startswith('left-of') or action.startswith('right-of'):
        action = action.split(' ')[0] # if action == "left-of VGA1"
    return action

def select_action_arg(possible, menu_text, choosed = None):
    if choosed == None:
        if len(possible) == 1 and assume == True:
            choosed = possible[0]
        else:
            choosed = menu(menu_text, possible)
    elif choosed not in possible:
        print('Invalid value {}'.format(choosed))
    return choosed

#
# parsing arguments
parser = argparse.ArgumentParser(description='interactive xrandr')
parser.add_argument("output", type=str,
                    help="output to select", nargs='?')
parser.add_argument("action", type=str,
                    help="action to output", nargs='?')
parser.add_argument("action_arg", type=str,
                    help="argument for action to output", nargs='?')
group = parser.add_mutually_exclusive_group(required=False)
group.add_argument("--rl", help="use readline with completion",
                   action="store_true")
group.add_argument("--rc", help="use readchar", action="store_true")
group.add_argument("--dialog", help="use dialog", action="store_true")
group.add_argument("--complete", help="use for shellscript",
                   action="store_true")
args = parser.parse_args()
quiet = False
assume = True
execute = True

if args.dialog:
    menu = dialog
elif args.complete:
    menu = complete
    quiet = True
    assume = False
    execute = False
elif args.rc:
    menu = readchar
else: # --rl is the default
    menu = readline

#
# begin ixrandr
screens = process_xrandr()
screen1 = select_screen(screens)
outputs = { n:o
            for n, o in screens[screen1]["outputs"].items()
            if o['connected'] or o['enable']
}

if args.output and args.output not in outputs.keys():
    print('{} is not a valid output'.format(args.output))
    exit(1)
output1, output_actions = select_output1(outputs, args.output)

if args.action and args.action not in output_actions:
    print('{} is not a valid action'.format(args.action))
    exit(1)
action = select_action(output1, output_actions, args.action)

if action == 'resolution':
    avaible_res = screens[screen1]['outputs'][output1]['avaible_res']
    txt = 'Choose your resolution for {}: '.format(output1)
    resolution = select_action_arg(avaible_res, txt, args.action_arg)
    if execute:
        change_output_resolution(output1, resolution)

elif action == 'rotation':
    rots = ['normal', 'inverted', 'left', 'right']
    rotation = select_action_arg(rots, "Select your rotation: ", args.action_arg)
    if execute:
        set_output_rotation(output1, rotation)

elif action == 'off':
    if execute:
        output_off(output1)

elif action in ['left-of', 'right-of']:
    output2 = select_action_arg(list(outputs.keys()), '{} of : '.format(action),
                                args.action_arg)
    if screens[screen1]['outputs'][output1]['enable'] == False:
        enable_output(output1)
    if screens[screen1]['outputs'][output2]['enable'] == False:
        enable_output(output2)
    if execute:
        set_output_relative_pos_to_output(output1, action, output2)
exit(0)
